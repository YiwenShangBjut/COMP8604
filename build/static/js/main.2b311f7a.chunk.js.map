{"version":3,"sources":["index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","showModal","setModal","_useState3","name","category","condition","price","description","_useState4","formValues","setFormValues","_useForm","useForm","defaultValues","register","handleSubmit","watch","errors","formState","handleClose","console","log","React","createElement","className","id","onSubmit","data","style","marginTop","Object","assign","required","placeholder","type","value","defaultChecked","select","min","max","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","Barcode","code","substring","concat","generateBarcode","displayValue","DialogActions","Button","onClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.2b311f7a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useForm } from \"react-hook-form\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\n\nimport \"./styles.css\";\nimport Barcode from 'react-barcode'\n\nfunction App() {\n  const [showModal, setModal]=useState(false)\n  const [formValues, setFormValues]=useState({\n    name: '',\n    category: '1',\n    condition: '50',\n    price: 10,\n    description: '',\n  })\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors }\n  } = useForm({\n    defaultValues: {\n      name: '',\n      category: '1',\n      condition: '50',\n      price: 10,\n      description: '',\n    }\n  });\n  \n  const onSubmit = (data) => {\n    console.log(data);\n    setFormValues(data)\n    setModal(true);\n  }; // your form submit function which will invoke after successful validation\n\n  const handleClose = () => {\n    setModal(false);\n  };\n\n  const generateBarcode = () =>{\n    let price = formValues.price\n    price=price*0.01*formValues.condition\n    console.log('price: ',price)\n    let code=formValues.name.substring(0,5).concat(price)\n    console.log('code: ',code)\n    return code\n  }\n\n  console.log(watch(\"name\")); // you can watch individual input by pass the name of the input\n\n  return (\n    <div>\n      <div className=\"title\" >\n        Name of our project\n      </div>\n      <form id='form' onSubmit={handleSubmit(onSubmit)} style={{ marginTop: '30px' }}>\n        {/* register your input into the hook by invoking the \"register\" function */}\n        <label>Name</label>\n        <input {...register(\"name\", { required: true })} placeholder=\"Name of the item\" />\n        {errors.name && <p>This field is required</p>}\n\n        <label>Category</label>\n\n        <label className=\"radio-label\">Clothing<input {...register(\"category\")} className=\"radio\" type=\"radio\" id=\"category1\" value=\"1\" name=\"category\" defaultChecked /> </label>\n\n        <label className=\"radio-label\">Electronics<input {...register(\"category\")} className=\"radio\" type=\"radio\" id=\"category2\" value=\"2\" name=\"category\" /></label>\n\n        <label className=\"radio-label\">Books<input {...register(\"category\")} className=\"radio\" type=\"radio\" id=\"category3\" value=\"3\" name=\"category\" /></label>\n\n        <label>Condition</label>\n\n        <select {...register(\"condition\")}>\n          <option value=\"100\">Never Worn</option>\n          <option value=\"75\">Very good</option>\n          <option select value=\"50\">Good</option>\n          <option value=\"25\">Fair</option>\n        </select>\n\n        <label>Price at time of purchase</label>\n        <div className=\"price\">\n        <input  type=\"number\" min=\"1\" max=\"100\" className=\"price-input\" {...register(\"price\", { required: true })} />\n        <span className=\"pound\">Â£</span>\n        </div>\n\n        <label>Description</label>\n        <textarea placeholder=\"\" {...register(\"description\")} />\n\n\n        <button type=\"submit\" >Submit</button>\n      </form>\n\n\n      <Dialog\n        open={showModal}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Here is your barcode\"}\n        </DialogTitle>\n        <DialogContent >\n          <Barcode value={generateBarcode()} displayValue={false} />\n\n        </DialogContent>\n        <DialogActions>\n          <Button type=\"text\" onClick={handleClose} >\n            Create a new form\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}